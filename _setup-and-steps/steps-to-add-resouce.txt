Steps to Add a New Resource to an Upjet-based Crossplane Provider

1. Add External Name Configuration
Edit: config/externalname.go

Action:
Add an entry for your resource with either config.IdentifierFromProvider or config.TemplatedStringAsIdentifier, based on the import format described in the Terraform docs.

Reference:
Use the “Import” section from the Terraform Registry for the exact import path template.

2. Remove or Comment Out in Not-Tested File
Edit: config/externalnamenottested.go

Action:
If your resource appears here, comment it out or remove it.
This allows Upjet to include and generate it.

3. Handle Warnings and Mutually Exclusive Fields (If Needed) and all IAM resources
Where:
Check the “Warning”/“Note” boxes on the Terraform Registry page for your resource.

Edit: config/<service>/config.go (e.g., config/bigquery/config.go, config/vertexai/config.go)

Action:

If a field in the resource should NOT be managed directly (e.g., because there’s a separate CRD for it), move that field to status:

p.AddResourceConfigurator("resource_name", func(r *config.Resource) {
  config.MoveToStatus(r.TerraformResource, "field_name")
})

Also add Crossplane references (using r.References) if the resource has fields referring to other managed resources.

check here for the schema: https://github.com/hashicorp/terraform-provider-google/tree/main/google/services
example:

p.AddResourceConfigurator("google_vertex_ai_endpoint_iam_member", func(r *config.Resource) {
	r.References["endpoint"] = config.Reference{
			TerraformName: "google_vertex_ai_endpoint",
	}
})

4. Run Code Generation
Terminal commands:

make submodules
make generate

This regenerates the CRDs and controller code

**Newer services like VertexAI may not automatically generate the IAM resources that have been "fixed-in" for older services like GCS and BigQuery.
Check config/schema.json to see if the schema was generated, otherwise add it yourself.

example:

"google_vertex_ai_endpoint_iam_member": {
  "version": 0,
  "block": {
    "attributes": {
      "endpoint": {
        "type": "string",
        "description_kind": "plain",
        "required": true
      },
      "etag": {
        "type": "string",
        "description_kind": "plain",
        "computed": true
      },
      "id": {
        "type": "string",
        "description_kind": "plain",
        "optional": true,
        "computed": true
      },
      "location": {
        "type": "string",
        "description_kind": "plain",
        "required": true
      },
      "member": {
        "type": "string",
        "description_kind": "plain",
        "required": true
      },
      "project": {
        "type": "string",
        "description_kind": "plain",
        "optional": true,
        "computed": true
      },
      "role": {
        "type": "string",
        "description_kind": "plain",
        "required": true
      }
    },
    "block_types": {
      "condition": {
        "nesting_mode": "list",
        "block": {
          "attributes": {
            "description": {
              "type": "string",
              "description_kind": "plain",
              "optional": true
            },
            "expression": {
              "type": "string",
              "description_kind": "plain",
              "required": true
            },
            "title": {
              "type": "string",
              "description_kind": "plain",
              "required": true
            }
          },
          "description_kind": "plain"
        },
        "max_items": 1
      }
    },
    "description_kind": "plain"
  }
}

**YOU MUST COMMENT OUT THE SCHEMA GENERATION in the Makefile at line 210 to not overwrite the schema, but to use it to generate the CRD/controller code.
# generate.init: $(TERRAFORM_PROVIDER_SCHEMA) pull-docs

5. Validate and build provider
Check generated files:
Validate the new CRD(s) appear in the package/crds/ directory.

make build-provider.<service>

example: make build-provider.vertexai

Valudate _output/xpkg files and locate *.xpkg file to docker load

6. Deploy and Test:
docker load -i /home/martinfleming/src/github.com/martinflemingdev/provider-upjet-gcp/_output/xpkg/linux_amd64/provider-gcp-bigquery-v0.0.0-1357.g5381bec1.dirty.xpkg
docker tag sha256:6636c90cd5a8eab8f3e6a08c049bacf1313b0a1e4dff8936a7b6c17a5b4bd0b3 martinflemingdev/provider-gcp-bigquery:tf-v6.43.0
docker push martinflemingdev/provider-gcp-bigquery:tf-v6.43.0