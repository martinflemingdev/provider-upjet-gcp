// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Instance.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.GceSetup != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.GceSetup.NetworkInterfaces); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIP),
						Extract:      resource.ExtractParamPath("address", false),
						Reference:    mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIPRef,
						Selector:     mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIPSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIP")
				}
				mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIP = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIPRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.GceSetup != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.GceSetup.NetworkInterfaces); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].Network),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].NetworkRef,
					Selector:     mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].NetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].Network")
			}
			mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].Network = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].NetworkRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GceSetup != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.GceSetup.NetworkInterfaces); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].Subnet),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].SubnetRef,
					Selector:     mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].SubnetSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].Subnet")
			}
			mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].Subnet = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.GceSetup.NetworkInterfaces[i4].SubnetRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.GceSetup != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.GceSetup.NetworkInterfaces); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIP),
						Extract:      resource.ExtractParamPath("address", false),
						Reference:    mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIPRef,
						Selector:     mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIPSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIP")
				}
				mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIP = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].AccessConfigs[i5].ExternalIPRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.GceSetup != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.GceSetup.NetworkInterfaces); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].Network),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].NetworkRef,
					Selector:     mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].NetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].Network")
			}
			mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].Network = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].NetworkRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.GceSetup != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.GceSetup.NetworkInterfaces); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].Subnet),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].SubnetRef,
					Selector:     mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].SubnetSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].Subnet")
			}
			mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].Subnet = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.GceSetup.NetworkInterfaces[i4].SubnetRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this InstanceIAMMember.
func (mg *InstanceIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("workbench.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("workbench.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}
