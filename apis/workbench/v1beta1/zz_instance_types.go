// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AcceleratorConfigsInitParameters struct {

	// Optional. Count of cores of this accelerator.
	CoreCount *string `json:"coreCount,omitempty" tf:"core_count,omitempty"`

	// Optional. Type of this accelerator.
	// Possible values are: NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_A100, NVIDIA_A100_80GB, NVIDIA_L4, NVIDIA_TESLA_T4_VWS, NVIDIA_TESLA_P100_VWS, NVIDIA_TESLA_P4_VWS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AcceleratorConfigsObservation struct {

	// Optional. Count of cores of this accelerator.
	CoreCount *string `json:"coreCount,omitempty" tf:"core_count,omitempty"`

	// Optional. Type of this accelerator.
	// Possible values are: NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_A100, NVIDIA_A100_80GB, NVIDIA_L4, NVIDIA_TESLA_T4_VWS, NVIDIA_TESLA_P100_VWS, NVIDIA_TESLA_P4_VWS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AcceleratorConfigsParameters struct {

	// Optional. Count of cores of this accelerator.
	// +kubebuilder:validation:Optional
	CoreCount *string `json:"coreCount,omitempty" tf:"core_count,omitempty"`

	// Optional. Type of this accelerator.
	// Possible values are: NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_A100, NVIDIA_A100_80GB, NVIDIA_L4, NVIDIA_TESLA_T4_VWS, NVIDIA_TESLA_P100_VWS, NVIDIA_TESLA_P4_VWS.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AccessConfigsInitParameters struct {

	// An external IP address associated with this instance. Specify an unused
	// static external IP address available to the project or leave this field
	// undefined to use an IP from a shared ephemeral IP address pool. If you
	// specify a static external IP address, it must live in the same region as
	// the zone of the instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Address
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("address",false)
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	// Reference to a Address in compute to populate externalIp.
	// +kubebuilder:validation:Optional
	ExternalIPRef *v1.Reference `json:"externalIpRef,omitempty" tf:"-"`

	// Selector for a Address in compute to populate externalIp.
	// +kubebuilder:validation:Optional
	ExternalIPSelector *v1.Selector `json:"externalIpSelector,omitempty" tf:"-"`
}

type AccessConfigsObservation struct {

	// An external IP address associated with this instance. Specify an unused
	// static external IP address available to the project or leave this field
	// undefined to use an IP from a shared ephemeral IP address pool. If you
	// specify a static external IP address, it must live in the same region as
	// the zone of the instance.
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`
}

type AccessConfigsParameters struct {

	// An external IP address associated with this instance. Specify an unused
	// static external IP address available to the project or leave this field
	// undefined to use an IP from a shared ephemeral IP address pool. If you
	// specify a static external IP address, it must live in the same region as
	// the zone of the instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Address
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("address",false)
	// +kubebuilder:validation:Optional
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	// Reference to a Address in compute to populate externalIp.
	// +kubebuilder:validation:Optional
	ExternalIPRef *v1.Reference `json:"externalIpRef,omitempty" tf:"-"`

	// Selector for a Address in compute to populate externalIp.
	// +kubebuilder:validation:Optional
	ExternalIPSelector *v1.Selector `json:"externalIpSelector,omitempty" tf:"-"`
}

type BootDiskInitParameters struct {

	// Optional. Input only. Disk encryption method used on the boot
	// and data disks, defaults to GMEK.
	// Possible values are: GMEK, CMEK.
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// Optional. The size of the disk in GB attached to this VM instance,
	// up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
	// 100.
	DiskSizeGb *string `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Optional. Input only. Indicates the type of the disk.
	// Possible values are: PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// 'Optional. The KMS key used to encrypt the disks,
	// only applicable if disk_encryption is CMEK. Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// Learn more about using your own encryption keys.'
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type BootDiskObservation struct {

	// Optional. Input only. Disk encryption method used on the boot
	// and data disks, defaults to GMEK.
	// Possible values are: GMEK, CMEK.
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// Optional. The size of the disk in GB attached to this VM instance,
	// up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
	// 100.
	DiskSizeGb *string `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Optional. Input only. Indicates the type of the disk.
	// Possible values are: PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// 'Optional. The KMS key used to encrypt the disks,
	// only applicable if disk_encryption is CMEK. Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// Learn more about using your own encryption keys.'
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type BootDiskParameters struct {

	// Optional. Input only. Disk encryption method used on the boot
	// and data disks, defaults to GMEK.
	// Possible values are: GMEK, CMEK.
	// +kubebuilder:validation:Optional
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// Optional. The size of the disk in GB attached to this VM instance,
	// up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
	// 100.
	// +kubebuilder:validation:Optional
	DiskSizeGb *string `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Optional. Input only. Indicates the type of the disk.
	// Possible values are: PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// 'Optional. The KMS key used to encrypt the disks,
	// only applicable if disk_encryption is CMEK. Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// Learn more about using your own encryption keys.'
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type ConfidentialInstanceConfigInitParameters struct {

	// Defines the type of technology used by the confidential instance.
	// Possible values are: SEV.
	ConfidentialInstanceType *string `json:"confidentialInstanceType,omitempty" tf:"confidential_instance_type,omitempty"`
}

type ConfidentialInstanceConfigObservation struct {

	// Defines the type of technology used by the confidential instance.
	// Possible values are: SEV.
	ConfidentialInstanceType *string `json:"confidentialInstanceType,omitempty" tf:"confidential_instance_type,omitempty"`
}

type ConfidentialInstanceConfigParameters struct {

	// Defines the type of technology used by the confidential instance.
	// Possible values are: SEV.
	// +kubebuilder:validation:Optional
	ConfidentialInstanceType *string `json:"confidentialInstanceType,omitempty" tf:"confidential_instance_type,omitempty"`
}

type ContainerImageInitParameters struct {

	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ContainerImageObservation struct {

	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ContainerImageParameters struct {

	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository" tf:"repository,omitempty"`

	// The tag of the container image. If not specified, this defaults to the latest tag.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type DataDisksInitParameters struct {

	// Optional. Input only. Disk encryption method used on the boot
	// and data disks, defaults to GMEK.
	// Possible values are: GMEK, CMEK.
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// Optional. The size of the disk in GB attached to this VM instance,
	// up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
	// 100.
	DiskSizeGb *string `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Optional. Input only. Indicates the type of the disk.
	// Possible values are: PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// 'Optional. The KMS key used to encrypt the disks,
	// only applicable if disk_encryption is CMEK. Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// Learn more about using your own encryption keys.'
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type DataDisksObservation struct {

	// Optional. Input only. Disk encryption method used on the boot
	// and data disks, defaults to GMEK.
	// Possible values are: GMEK, CMEK.
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// Optional. The size of the disk in GB attached to this VM instance,
	// up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
	// 100.
	DiskSizeGb *string `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Optional. Input only. Indicates the type of the disk.
	// Possible values are: PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// 'Optional. The KMS key used to encrypt the disks,
	// only applicable if disk_encryption is CMEK. Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// Learn more about using your own encryption keys.'
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type DataDisksParameters struct {

	// Optional. Input only. Disk encryption method used on the boot
	// and data disks, defaults to GMEK.
	// Possible values are: GMEK, CMEK.
	// +kubebuilder:validation:Optional
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// Optional. The size of the disk in GB attached to this VM instance,
	// up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
	// 100.
	// +kubebuilder:validation:Optional
	DiskSizeGb *string `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Optional. Input only. Indicates the type of the disk.
	// Possible values are: PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// 'Optional. The KMS key used to encrypt the disks,
	// only applicable if disk_encryption is CMEK. Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// Learn more about using your own encryption keys.'
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type GceSetupInitParameters struct {

	// The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has
	// enough vCPUs and memory to support the .
	// Currently supports only one accelerator configuration.
	// Structure is documented below.
	AcceleratorConfigs []AcceleratorConfigsInitParameters `json:"acceleratorConfigs,omitempty" tf:"accelerator_configs,omitempty"`

	// The definition of a boot disk.
	// Structure is documented below.
	BootDisk *BootDiskInitParameters `json:"bootDisk,omitempty" tf:"boot_disk,omitempty"`

	// Confidential instance configuration.
	// Structure is documented below.
	ConfidentialInstanceConfig *ConfidentialInstanceConfigInitParameters `json:"confidentialInstanceConfig,omitempty" tf:"confidential_instance_config,omitempty"`

	// Use a container image to start the workbench instance.
	// Structure is documented below.
	ContainerImage *ContainerImageInitParameters `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// Data disks attached to the VM instance. Currently supports only one data disk.
	// Structure is documented below.
	DataDisks *DataDisksInitParameters `json:"dataDisks,omitempty" tf:"data_disks,omitempty"`

	// Optional. If true, no external IP will be assigned to this VM instance.
	DisablePublicIP *bool `json:"disablePublicIp,omitempty" tf:"disable_public_ip,omitempty"`

	// Optional. Flag to enable ip forwarding or not, default false/off.
	// https://cloud.google.com/vpc/docs/using-routes#canipforward
	EnableIPForwarding *bool `json:"enableIpForwarding,omitempty" tf:"enable_ip_forwarding,omitempty"`

	// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Optional. Custom metadata to apply to this instance.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The network interfaces for the VM. Supports only one interface.
	// Structure is documented below.
	NetworkInterfaces []NetworkInterfacesInitParameters `json:"networkInterfaces,omitempty" tf:"network_interfaces,omitempty"`

	// The service account that serves as an identity for the VM instance. Currently supports only one service account.
	// Structure is documented below.
	ServiceAccounts []ServiceAccountsInitParameters `json:"serviceAccounts,omitempty" tf:"service_accounts,omitempty"`

	// A set of Shielded Instance options. See Images using supported Shielded
	// VM features.
	// Not all combinations are valid.
	// Structure is documented below.
	ShieldedInstanceConfig *ShieldedInstanceConfigInitParameters `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// Optional. The Compute Engine tags to add to instance (see Tagging
	// instances).
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Definition of a custom Compute Engine virtual machine image for starting
	// a workbench instance with the environment installed directly on the VM.
	// Structure is documented below.
	VMImage *VMImageInitParameters `json:"vmImage,omitempty" tf:"vm_image,omitempty"`
}

type GceSetupObservation struct {

	// The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has
	// enough vCPUs and memory to support the .
	// Currently supports only one accelerator configuration.
	// Structure is documented below.
	AcceleratorConfigs []AcceleratorConfigsObservation `json:"acceleratorConfigs,omitempty" tf:"accelerator_configs,omitempty"`

	// The definition of a boot disk.
	// Structure is documented below.
	BootDisk *BootDiskObservation `json:"bootDisk,omitempty" tf:"boot_disk,omitempty"`

	// Confidential instance configuration.
	// Structure is documented below.
	ConfidentialInstanceConfig *ConfidentialInstanceConfigObservation `json:"confidentialInstanceConfig,omitempty" tf:"confidential_instance_config,omitempty"`

	// Use a container image to start the workbench instance.
	// Structure is documented below.
	ContainerImage *ContainerImageObservation `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// Data disks attached to the VM instance. Currently supports only one data disk.
	// Structure is documented below.
	DataDisks *DataDisksObservation `json:"dataDisks,omitempty" tf:"data_disks,omitempty"`

	// Optional. If true, no external IP will be assigned to this VM instance.
	DisablePublicIP *bool `json:"disablePublicIp,omitempty" tf:"disable_public_ip,omitempty"`

	// Optional. Flag to enable ip forwarding or not, default false/off.
	// https://cloud.google.com/vpc/docs/using-routes#canipforward
	EnableIPForwarding *bool `json:"enableIpForwarding,omitempty" tf:"enable_ip_forwarding,omitempty"`

	// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Optional. Custom metadata to apply to this instance.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The network interfaces for the VM. Supports only one interface.
	// Structure is documented below.
	NetworkInterfaces []NetworkInterfacesObservation `json:"networkInterfaces,omitempty" tf:"network_interfaces,omitempty"`

	// The service account that serves as an identity for the VM instance. Currently supports only one service account.
	// Structure is documented below.
	ServiceAccounts []ServiceAccountsObservation `json:"serviceAccounts,omitempty" tf:"service_accounts,omitempty"`

	// A set of Shielded Instance options. See Images using supported Shielded
	// VM features.
	// Not all combinations are valid.
	// Structure is documented below.
	ShieldedInstanceConfig *ShieldedInstanceConfigObservation `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// Optional. The Compute Engine tags to add to instance (see Tagging
	// instances).
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Definition of a custom Compute Engine virtual machine image for starting
	// a workbench instance with the environment installed directly on the VM.
	// Structure is documented below.
	VMImage *VMImageObservation `json:"vmImage,omitempty" tf:"vm_image,omitempty"`
}

type GceSetupParameters struct {

	// The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has
	// enough vCPUs and memory to support the .
	// Currently supports only one accelerator configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AcceleratorConfigs []AcceleratorConfigsParameters `json:"acceleratorConfigs,omitempty" tf:"accelerator_configs,omitempty"`

	// The definition of a boot disk.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BootDisk *BootDiskParameters `json:"bootDisk,omitempty" tf:"boot_disk,omitempty"`

	// Confidential instance configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ConfidentialInstanceConfig *ConfidentialInstanceConfigParameters `json:"confidentialInstanceConfig,omitempty" tf:"confidential_instance_config,omitempty"`

	// Use a container image to start the workbench instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ContainerImage *ContainerImageParameters `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// Data disks attached to the VM instance. Currently supports only one data disk.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DataDisks *DataDisksParameters `json:"dataDisks,omitempty" tf:"data_disks,omitempty"`

	// Optional. If true, no external IP will be assigned to this VM instance.
	// +kubebuilder:validation:Optional
	DisablePublicIP *bool `json:"disablePublicIp,omitempty" tf:"disable_public_ip,omitempty"`

	// Optional. Flag to enable ip forwarding or not, default false/off.
	// https://cloud.google.com/vpc/docs/using-routes#canipforward
	// +kubebuilder:validation:Optional
	EnableIPForwarding *bool `json:"enableIpForwarding,omitempty" tf:"enable_ip_forwarding,omitempty"`

	// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Optional. Custom metadata to apply to this instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The network interfaces for the VM. Supports only one interface.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	NetworkInterfaces []NetworkInterfacesParameters `json:"networkInterfaces,omitempty" tf:"network_interfaces,omitempty"`

	// The service account that serves as an identity for the VM instance. Currently supports only one service account.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ServiceAccounts []ServiceAccountsParameters `json:"serviceAccounts,omitempty" tf:"service_accounts,omitempty"`

	// A set of Shielded Instance options. See Images using supported Shielded
	// VM features.
	// Not all combinations are valid.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ShieldedInstanceConfig *ShieldedInstanceConfigParameters `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// Optional. The Compute Engine tags to add to instance (see Tagging
	// instances).
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Definition of a custom Compute Engine virtual machine image for starting
	// a workbench instance with the environment installed directly on the VM.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VMImage *VMImageParameters `json:"vmImage,omitempty" tf:"vm_image,omitempty"`
}

type HealthInfoInitParameters struct {
}

type HealthInfoObservation struct {
}

type HealthInfoParameters struct {
}

type InstanceInitParameters struct {

	// Desired state of the Workbench Instance. Set this field to ACTIVE to start the Instance, and STOPPED to stop the Instance.
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess *bool `json:"disableProxyAccess,omitempty" tf:"disable_proxy_access,omitempty"`

	// Flag that specifies that a notebook can be accessed with third party
	// identity provider.
	EnableThirdPartyIdentity *bool `json:"enableThirdPartyIdentity,omitempty" tf:"enable_third_party_identity,omitempty"`

	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup *GceSetupInitParameters `json:"gceSetup,omitempty" tf:"gce_setup,omitempty"`

	// Required. User-defined unique ID of this instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// 'Optional. Input only. The owner of this instance after creation. Format:
	// alias@example.com Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.
	// If specified, sets the access mode to Single user. For more details, see
	// https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab'
	InstanceOwners []*string `json:"instanceOwners,omitempty" tf:"instance_owners,omitempty"`

	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type InstanceObservation struct {

	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Output only. Email address of entity that sent original CreateInstance request.
	Creator *string `json:"creator,omitempty" tf:"creator,omitempty"`

	// Desired state of the Workbench Instance. Set this field to ACTIVE to start the Instance, and STOPPED to stop the Instance.
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess *bool `json:"disableProxyAccess,omitempty" tf:"disable_proxy_access,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// Flag that specifies that a notebook can be accessed with third party
	// identity provider.
	EnableThirdPartyIdentity *bool `json:"enableThirdPartyIdentity,omitempty" tf:"enable_third_party_identity,omitempty"`

	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup *GceSetupObservation `json:"gceSetup,omitempty" tf:"gce_setup,omitempty"`

	// 'Output only. Additional information about instance health. Example:
	// healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
	// "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
	HealthInfo []HealthInfoObservation `json:"healthInfo,omitempty" tf:"health_info,omitempty"`

	// Output only. Instance health_state.
	HealthState *string `json:"healthState,omitempty" tf:"health_state,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/instances/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Required. User-defined unique ID of this instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// 'Optional. Input only. The owner of this instance after creation. Format:
	// alias@example.com Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.
	// If specified, sets the access mode to Single user. For more details, see
	// https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab'
	InstanceOwners []*string `json:"instanceOwners,omitempty" tf:"instance_owners,omitempty"`

	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Part of parent. See documentation of projectsId.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Output only. The proxy endpoint that is used to access the Jupyter notebook.
	ProxyURI *string `json:"proxyUri,omitempty" tf:"proxy_uri,omitempty"`

	// Output only. The state of this instance.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Output only. The upgrade history of this instance.
	// Structure is documented below.
	UpgradeHistory []UpgradeHistoryObservation `json:"upgradeHistory,omitempty" tf:"upgrade_history,omitempty"`
}

type InstanceParameters struct {

	// Desired state of the Workbench Instance. Set this field to ACTIVE to start the Instance, and STOPPED to stop the Instance.
	// +kubebuilder:validation:Optional
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Optional. If true, the workbench instance will not register with the proxy.
	// +kubebuilder:validation:Optional
	DisableProxyAccess *bool `json:"disableProxyAccess,omitempty" tf:"disable_proxy_access,omitempty"`

	// Flag that specifies that a notebook can be accessed with third party
	// identity provider.
	// +kubebuilder:validation:Optional
	EnableThirdPartyIdentity *bool `json:"enableThirdPartyIdentity,omitempty" tf:"enable_third_party_identity,omitempty"`

	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GceSetup *GceSetupParameters `json:"gceSetup,omitempty" tf:"gce_setup,omitempty"`

	// Required. User-defined unique ID of this instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// 'Optional. Input only. The owner of this instance after creation. Format:
	// alias@example.com Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.
	// If specified, sets the access mode to Single user. For more details, see
	// https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab'
	// +kubebuilder:validation:Optional
	InstanceOwners []*string `json:"instanceOwners,omitempty" tf:"instance_owners,omitempty"`

	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Part of parent. See documentation of projectsId.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type NetworkInterfacesInitParameters struct {

	// Optional. An array of configurations for this interface. Currently, only one access
	// config, ONE_TO_ONE_NAT, is supported. If no accessConfigs specified, the
	// instance will have an external internet access through an ephemeral
	// external IP address.
	// Structure is documented below.
	AccessConfigs []AccessConfigsInitParameters `json:"accessConfigs,omitempty" tf:"access_configs,omitempty"`

	// Optional. The name of the VPC that this VM instance is in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`

	// Optional. The type of vNIC to be used on this interface. This
	// may be gVNIC or VirtioNet.
	// Possible values are: VIRTIO_NET, GVNIC.
	NicType *string `json:"nicType,omitempty" tf:"nic_type,omitempty"`

	// Optional. The name of the subnet that this VM instance is in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta2.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Reference to a Subnetwork in compute to populate subnet.
	// +kubebuilder:validation:Optional
	SubnetRef *v1.Reference `json:"subnetRef,omitempty" tf:"-"`

	// Selector for a Subnetwork in compute to populate subnet.
	// +kubebuilder:validation:Optional
	SubnetSelector *v1.Selector `json:"subnetSelector,omitempty" tf:"-"`
}

type NetworkInterfacesObservation struct {

	// Optional. An array of configurations for this interface. Currently, only one access
	// config, ONE_TO_ONE_NAT, is supported. If no accessConfigs specified, the
	// instance will have an external internet access through an ephemeral
	// external IP address.
	// Structure is documented below.
	AccessConfigs []AccessConfigsObservation `json:"accessConfigs,omitempty" tf:"access_configs,omitempty"`

	// Optional. The name of the VPC that this VM instance is in.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Optional. The type of vNIC to be used on this interface. This
	// may be gVNIC or VirtioNet.
	// Possible values are: VIRTIO_NET, GVNIC.
	NicType *string `json:"nicType,omitempty" tf:"nic_type,omitempty"`

	// Optional. The name of the subnet that this VM instance is in.
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type NetworkInterfacesParameters struct {

	// Optional. An array of configurations for this interface. Currently, only one access
	// config, ONE_TO_ONE_NAT, is supported. If no accessConfigs specified, the
	// instance will have an external internet access through an ephemeral
	// external IP address.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AccessConfigs []AccessConfigsParameters `json:"accessConfigs,omitempty" tf:"access_configs,omitempty"`

	// Optional. The name of the VPC that this VM instance is in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`

	// Optional. The type of vNIC to be used on this interface. This
	// may be gVNIC or VirtioNet.
	// Possible values are: VIRTIO_NET, GVNIC.
	// +kubebuilder:validation:Optional
	NicType *string `json:"nicType,omitempty" tf:"nic_type,omitempty"`

	// Optional. The name of the subnet that this VM instance is in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta2.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Reference to a Subnetwork in compute to populate subnet.
	// +kubebuilder:validation:Optional
	SubnetRef *v1.Reference `json:"subnetRef,omitempty" tf:"-"`

	// Selector for a Subnetwork in compute to populate subnet.
	// +kubebuilder:validation:Optional
	SubnetSelector *v1.Selector `json:"subnetSelector,omitempty" tf:"-"`
}

type ServiceAccountsInitParameters struct {

	// Optional. Email address of the service account.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type ServiceAccountsObservation struct {

	// Optional. Email address of the service account.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Output)
	// Output only. The list of scopes to be made available for this
	// service account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type ServiceAccountsParameters struct {

	// Optional. Email address of the service account.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type ShieldedInstanceConfigInitParameters struct {

	// Optional. Defines whether the VM instance has integrity monitoring
	// enabled. Enables monitoring and attestation of the boot integrity of the VM
	// instance. The attestation is performed against the integrity policy baseline.
	// This baseline is initially derived from the implicitly trusted boot image
	// when the VM instance is created. Enabled by default.
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Optional. Defines whether the VM instance has Secure Boot enabled.
	// Secure Boot helps ensure that the system only runs authentic software by verifying
	// the digital signature of all boot components, and halting the boot process
	// if signature verification fails. Disabled by default.
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Optional. Defines whether the VM instance has the vTPM enabled.
	// Enabled by default.
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type ShieldedInstanceConfigObservation struct {

	// Optional. Defines whether the VM instance has integrity monitoring
	// enabled. Enables monitoring and attestation of the boot integrity of the VM
	// instance. The attestation is performed against the integrity policy baseline.
	// This baseline is initially derived from the implicitly trusted boot image
	// when the VM instance is created. Enabled by default.
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Optional. Defines whether the VM instance has Secure Boot enabled.
	// Secure Boot helps ensure that the system only runs authentic software by verifying
	// the digital signature of all boot components, and halting the boot process
	// if signature verification fails. Disabled by default.
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Optional. Defines whether the VM instance has the vTPM enabled.
	// Enabled by default.
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type ShieldedInstanceConfigParameters struct {

	// Optional. Defines whether the VM instance has integrity monitoring
	// enabled. Enables monitoring and attestation of the boot integrity of the VM
	// instance. The attestation is performed against the integrity policy baseline.
	// This baseline is initially derived from the implicitly trusted boot image
	// when the VM instance is created. Enabled by default.
	// +kubebuilder:validation:Optional
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Optional. Defines whether the VM instance has Secure Boot enabled.
	// Secure Boot helps ensure that the system only runs authentic software by verifying
	// the digital signature of all boot components, and halting the boot process
	// if signature verification fails. Disabled by default.
	// +kubebuilder:validation:Optional
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Optional. Defines whether the VM instance has the vTPM enabled.
	// Enabled by default.
	// +kubebuilder:validation:Optional
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type UpgradeHistoryInitParameters struct {
}

type UpgradeHistoryObservation struct {

	// Optional. Action. Rolloback or Upgrade.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Optional. The container image before this instance upgrade.
	ContainerImage *string `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Optional. The framework of this workbench instance.
	Framework *string `json:"framework,omitempty" tf:"framework,omitempty"`

	// Optional. The snapshot of the boot disk of this workbench instance before upgrade.
	Snapshot *string `json:"snapshot,omitempty" tf:"snapshot,omitempty"`

	// (Output)
	// Output only. The state of this instance upgrade history entry.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Optional. Target VM Version, like m63.
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`

	// Optional. The VM image before this instance upgrade.
	VMImage *string `json:"vmImage,omitempty" tf:"vm_image,omitempty"`

	// Optional. The version of the workbench instance before this upgrade.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type UpgradeHistoryParameters struct {
}

type VMImageInitParameters struct {

	// Optional. Use this VM image family to find the image; the newest
	// image in this family will be used.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// Optional. Use VM image name to find the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the Google Cloud project that this VM image belongs to.
	// Format: {project_id}
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type VMImageObservation struct {

	// Optional. Use this VM image family to find the image; the newest
	// image in this family will be used.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// Optional. Use VM image name to find the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the Google Cloud project that this VM image belongs to.
	// Format: {project_id}
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type VMImageParameters struct {

	// Optional. Use this VM image family to find the image; the newest
	// image in this family will be used.
	// +kubebuilder:validation:Optional
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// Optional. Use VM image name to find the image.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the Google Cloud project that this VM image belongs to.
	// Format: {project_id}
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API. A Workbench instance.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
